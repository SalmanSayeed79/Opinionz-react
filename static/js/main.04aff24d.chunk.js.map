{"version":3,"sources":["firestore.js","opinion.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","NewOpi","auth","props","className","data","App","useState","opinions","setOpinions","getData","collection","get","then","docs","map","a","useEffect","console","log","id","onSubmit","e","preventDefault","p","document","querySelector","value","add","type","name","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2QAcAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,cACnBC,MAAO,6CAMT,IAAMC,EAAGT,IAASU,YCVHC,GDWJX,IAASY,OAGLZ,EAAf,E,MCnBa,SAACa,GACV,OACI,wBAAIC,UAAU,QAAQD,EAAME,QCoErBC,MAhEf,WAAe,MAGgBC,mBAAS,IAHzB,mBAGNC,EAHM,KAGGC,EAHH,OAIYF,mBAAS,SAJrB,mBAOPG,GAPO,UAOC,WACZX,EAAGY,WAAW,YAAYC,MACvBC,MAAK,SAAAR,GACJI,EAAYJ,EAAKS,KAAKC,KAAI,SAAAC,GAAC,OAAEA,EAAEX,gBA4BrC,OAvBAY,qBAAU,WACRP,IACAQ,QAAQC,IAAI,cACZ,IAqBA,yBAAKf,UAAU,aACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,SAAd,cAEF,yBAAKA,UAAU,aACb,0BAAMgB,GAAG,WAAWC,SApBZ,SAACC,GACbA,EAAEC,iBACF,IAAIC,EAAIC,SAASC,cAAc,aAAvB,KAA4CC,MAE9C,IAAHH,IACDzB,EAAGY,WAAW,YAAYiB,IAAI,CAC5BvB,KAAKmB,IAEPN,QAAQC,IAAI,cACZT,KAEFe,SAASC,cAAc,aAAvB,KAA4CC,MAAM,KAU5C,2BAAOE,KAAK,OAAOC,KAAK,OAAQC,YAAY,UAC5C,2CAEF,6CACA,4BACGvB,EAASO,KAAI,SAAAC,GAAC,OACb,kBAAC,EAAD,CAAQX,KAAMW,EAAEX,WAGpB,iEClDY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASe,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.04aff24d.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport 'firebase/auth'\r\nimport 'firebase/firestore'\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBnzAE-lhNGZCUYmVcRmESwRyqQyzOvhPU\",\r\n  authDomain: \"opinion-z.firebaseapp.com\",\r\n  databaseURL: \"https://opinion-z.firebaseio.com\",\r\n  projectId: \"opinion-z\",\r\n  storageBucket: \"opinion-z.appspot.com\",\r\n  messagingSenderId: \"20789400614\",\r\n  appId: \"1:20789400614:web:567105c79b6014f15942e7\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nconst db=firebase.firestore();\r\nconst auth=firebase.auth();\r\n\r\nexport {db,auth};\r\nexport default firebase;\r\n","import React from 'react';\r\n\r\nconst NewOpi=(props)=>{\r\n    return(\r\n        <li className=\"data\">{props.data}</li>\r\n    );\r\n}\r\nexport default NewOpi;","import React,{useState, useEffect} from 'react';\nimport {db, auth} from './firestore';\nimport './App.css';\nimport NewOpi from './opinion';\n\n\n\n\nfunction App() {\n\n  //declaring states\n  const [opinions,setOpinions]=useState([]);\n  const [submit,setSubmit]=useState('false');\n\n\n  const getData=()=>{\n    db.collection('opinions').get()\n      .then(data=>{\n        setOpinions(data.docs.map(a=>a.data()))\n      })\n  \n      \n  }\n  useEffect(()=>{\n    getData();\n    console.log(\"grt data\");\n  },[])\n  \n\n\n\n\n  const addData=(e)=>{\n    e.preventDefault();\n    let p= (document.querySelector(\"#inputted\")['item'].value)\n    \n    if(p!=''){\n      db.collection('opinions').add({\n        data:p\n      })\n      console.log(\"data added\");\n      getData();\n    };\n    document.querySelector(\"#inputted\")['item'].value='';\n  }\n  \n  return (\n    <div className=\"container\">\n      <div className=\"nav\">\n        <h1 className=\"title\">Opinion.z</h1>\n      </div>\n      <div className=\"main_body\">\n        <form id=\"inputted\" onSubmit={addData}>\n          <input type=\"text\" name=\"item\"  placeholder=\"Write\"/>\n          <button>Submit</button>\n        </form>\n        <h2>Your Opinions</h2>\n        <ul>\n          {opinions.map(a=>(\n            <NewOpi data={a.data} />\n          ))}\n        </ul>\n        <p>Reload page to see new opinions</p>\n      </div>\n      \n      \n      \n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}